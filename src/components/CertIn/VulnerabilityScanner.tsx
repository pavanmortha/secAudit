import React, { useState } from 'react';
import { 
  Eye, 
  Play, 
  Pause, 
  AlertTriangle, 
  CheckCircle, 
  Clock,
  Target,
  Network,
  Globe,
  Database,
  Server,
  Shield,
  Settings,
  Download,
  Filter
} from 'lucide-react';
import { motion } from 'framer-motion';

interface ScanTarget {
  id: string;
  name: string;
  type: 'network' | 'web' | 'database' | 'host' | 'api';
  target: string;
  status: 'idle' | 'scanning' | 'completed' | 'failed';
  progress: number;
  vulnerabilities: {
    critical: number;
    high: number;
    medium: number;
    low: number;
    info: number;
  };
  lastScan?: Date;
  scanDuration?: string;
  scanType: string[];
}

const scanTargets: ScanTarget[] = [
  {
    id: 'web-app-1',
    name: 'Main Web Application',
    type: 'web',
    target: 'https://app.company.com',
    status: 'completed',
    progress: 100,
    vulnerabilities: { critical: 2, high: 5, medium: 8, low: 12, info: 3 },
    lastScan: new Date(Date.now() - 2 * 60 * 60 * 1000),
    scanDuration: '45 minutes',
    scanType: ['OWASP Top 10', 'SQL Injection', 'XSS', 'CSRF']
  },
  {
    id: 'network-1',
    name: 'Corporate Network',
    type: 'network',
    target: '192.168.1.0/24',
    status: 'scanning',
    progress: 65,
    vulnerabilities: { critical: 1, high: 3, medium: 7, low: 15, info: 8 },
    scanType: ['Port Scan', 'Service Detection', 'OS Fingerprinting']
  },
  {
    id: 'db-1',
    name: 'Production Database',
    type: 'database',
    target: 'db.company.com:5432',
    status: 'idle',
    progress: 0,
    vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, info: 0 },
    scanType: ['Configuration Audit', 'Access Control', 'Encryption Check']
  },
  {
    id: 'api-1',
    name: 'REST API Endpoints',
    type: 'api',
    target: 'https://api.company.com',
    status: 'completed',
    progress: 100,
    vulnerabilities: { critical: 0, high: 2, medium: 4, low: 6, info: 2 },
    lastScan: new Date(Date.now() - 6 * 60 * 60 * 1000),
    scanDuration: '30 minutes',
    scanType: ['API Security', 'Authentication', 'Rate Limiting']
  },
  {
    id: 'host-1',
    name: 'Web Server (Ubuntu)',
    type: 'host',
    target: '192.168.1.100',
    status: 'failed',
    progress: 0,
    vulnerabilities: { critical: 0, high: 0, medium: 0, low: 0, info: 0 },
    scanType: ['OS Vulnerabilities', 'Service Audit', 'Configuration Check']
  }
];

const vulnerabilityDetails = [
  {
    id: 'vuln-1',
    title: 'SQL Injection in Login Form',
    severity: 'critical',
    cvss: 9.1,
    target: 'web-app-1',
    description: 'The login form is vulnerable to SQL injection attacks through the username parameter.',
    impact: 'Complete database compromise possible',
    recommendation: 'Implement parameterized queries and input validation'
  },
  {
    id: 'vuln-2',
    title: 'Cross-Site Scripting (XSS)',
    severity: 'high',
    cvss: 7.4,
    target: 'web-app-1',
    description: 'Reflected XSS vulnerability in search functionality.',
    impact: 'Session hijacking and data theft possible',
    recommendation: 'Implement proper output encoding and CSP headers'
  },
  {
    id: 'vuln-3',
    title: 'Weak SSL/TLS Configuration',
    severity: 'medium',
    cvss: 5.3,
    target: 'web-app-1',
    description: 'Server supports deprecated TLS 1.0 and weak cipher suites.',
    impact: 'Man-in-the-middle attacks possible',
    recommendation: 'Disable TLS 1.0/1.1 and implement strong cipher suites'
  }
];

export const VulnerabilityScanner: React.FC = () => {
  const [selectedTarget, setSelectedTarget] = useState<ScanTarget | null>(null);
  const [scanningTargets, setScanningTargets] = useState<Set<string>>(new Set());
  const [showVulnDetails, setShowVulnDetails] = useState(false);
  const [filterSeverity, setFilterSeverity] = useState<string>('all');

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'web': return Globe;
      case 'network': return Network;
      case 'database': return Database;
      case 'host': return Server;
      case 'api': return Target;
      default: return Shield;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'text-green-600 bg-green-100';
      case 'scanning': return 'text-blue-600 bg-blue-100';
      case 'failed': return 'text-red-600 bg-red-100';
      default: return 'text-slate-600 bg-slate-100';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return CheckCircle;
      case 'scanning': return Clock;
      case 'failed': return AlertTriangle;
      default: return Play;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100 border-red-200';
      case 'high': return 'text-orange-600 bg-orange-100 border-orange-200';
      case 'medium': return 'text-yellow-600 bg-yellow-100 border-yellow-200';
      case 'low': return 'text-green-600 bg-green-100 border-green-200';
      case 'info': return 'text-blue-600 bg-blue-100 border-blue-200';
      default: return 'text-slate-600 bg-slate-100 border-slate-200';
    }
  };

  const startScan = (targetId: string) => {
    setScanningTargets(prev => new Set(prev).add(targetId));
    // Simulate scan progress
    setTimeout(() => {
      setScanningTargets(prev => {
        const newSet = new Set(prev);
        newSet.delete(targetId);
        return newSet;
      });
    }, 8000);
  };

  const totalVulns = scanTargets.reduce((acc, target) => ({
    critical: acc.critical + target.vulnerabilities.critical,
    high: acc.high + target.vulnerabilities.high,
    medium: acc.medium + target.vulnerabilities.medium,
    low: acc.low + target.vulnerabilities.low,
    info: acc.info + target.vulnerabilities.info
  }), { critical: 0, high: 0, medium: 0, low: 0, info: 0 });

  const filteredVulns = filterSeverity === 'all' 
    ? vulnerabilityDetails 
    : vulnerabilityDetails.filter(v => v.severity === filterSeverity);

  return (
    <div className="space-y-6">
      {/* Scanner Overview */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
          <div className="text-center">
            <Eye className="w-8 h-8 text-blue-600 mx-auto mb-2" />
            <div className="text-2xl font-bold text-slate-900">{scanTargets.length}</div>
            <div className="text-sm text-slate-600">Scan Targets</div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-4">
          <div className="text-center">
            <div className="text-lg font-bold text-red-600">{totalVulns.critical}</div>
            <div className="text-xs text-slate-600">Critical</div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-4">
          <div className="text-center">
            <div className="text-lg font-bold text-orange-600">{totalVulns.high}</div>
            <div className="text-xs text-slate-600">High</div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-4">
          <div className="text-center">
            <div className="text-lg font-bold text-yellow-600">{totalVulns.medium}</div>
            <div className="text-xs text-slate-600">Medium</div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-4">
          <div className="text-center">
            <div className="text-lg font-bold text-green-600">{totalVulns.low}</div>
            <div className="text-xs text-slate-600">Low</div>
          </div>
        </div>
        
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-4">
          <div className="text-center">
            <div className="text-lg font-bold text-blue-600">{totalVulns.info}</div>
            <div className="text-xs text-slate-600">Info</div>
          </div>
        </div>
      </div>

      {/* Scan Targets */}
      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-slate-900">Vulnerability Scan Targets</h3>
          <div className="flex items-center space-x-3">
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
              <Play className="w-4 h-4" />
              <span>Scan All</span>
            </button>
            <button className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
              <Target className="w-4 h-4" />
              <span>Add Target</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {scanTargets.map((target, index) => {
            const TypeIcon = getTypeIcon(target.type);
            const StatusIcon = getStatusIcon(target.status);
            const isScanning = scanningTargets.has(target.id) || target.status === 'scanning';
            
            return (
              <motion.div
                key={target.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="border border-slate-200 rounded-xl p-6 hover:shadow-md transition-shadow"
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                      <TypeIcon className="w-5 h-5 text-blue-600" />
                    </div>
                    <div>
                      <h4 className="font-semibold text-slate-900">{target.name}</h4>
                      <p className="text-sm text-slate-600">{target.target}</p>
                    </div>
                  </div>
                  
                  <div className={`flex items-center space-x-2 px-3 py-1 rounded-full ${getStatusColor(target.status)}`}>
                    <StatusIcon className="w-4 h-4" />
                    <span className="text-sm font-medium capitalize">{target.status}</span>
                  </div>
                </div>

                {isScanning && (
                  <div className="mb-4">
                    <div className="flex items-center justify-between text-sm mb-2">
                      <span className="text-slate-600">Scanning Progress</span>
                      <span className="font-semibold text-slate-900">{target.progress}%</span>
                    </div>
                    <div className="w-full bg-slate-200 rounded-full h-2">
                      <motion.div
                        className="h-2 bg-blue-600 rounded-full"
                        initial={{ width: 0 }}
                        animate={{ width: `${target.progress}%` }}
                        transition={{ duration: 0.5 }}
                      />
                    </div>
                  </div>
                )}

                <div className="mb-4">
                  <h5 className="text-sm font-medium text-slate-900 mb-2">Scan Types</h5>
                  <div className="flex flex-wrap gap-1">
                    {target.scanType.map((type, idx) => (
                      <span
                        key={idx}
                        className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded"
                      >
                        {type}
                      </span>
                    ))}
                  </div>
                </div>

                {target.status === 'completed' && (
                  <div className="mb-4">
                    <h5 className="text-sm font-medium text-slate-900 mb-2">Vulnerabilities Found</h5>
                    <div className="grid grid-cols-5 gap-2">
                      <div className="text-center p-2 bg-red-50 rounded">
                        <div className="text-sm font-bold text-red-600">{target.vulnerabilities.critical}</div>
                        <div className="text-xs text-red-600">Critical</div>
                      </div>
                      <div className="text-center p-2 bg-orange-50 rounded">
                        <div className="text-sm font-bold text-orange-600">{target.vulnerabilities.high}</div>
                        <div className="text-xs text-orange-600">High</div>
                      </div>
                      <div className="text-center p-2 bg-yellow-50 rounded">
                        <div className="text-sm font-bold text-yellow-600">{target.vulnerabilities.medium}</div>
                        <div className="text-xs text-yellow-600">Medium</div>
                      </div>
                      <div className="text-center p-2 bg-green-50 rounded">
                        <div className="text-sm font-bold text-green-600">{target.vulnerabilities.low}</div>
                        <div className="text-xs text-green-600">Low</div>
                      </div>
                      <div className="text-center p-2 bg-blue-50 rounded">
                        <div className="text-sm font-bold text-blue-600">{target.vulnerabilities.info}</div>
                        <div className="text-xs text-blue-600">Info</div>
                      </div>
                    </div>
                  </div>
                )}

                <div className="flex items-center justify-between">
                  <div className="text-sm text-slate-500">
                    {target.lastScan && (
                      <span>Last scan: {target.lastScan.toLocaleTimeString()}</span>
                    )}
                    {target.scanDuration && (
                      <span className="ml-4">Duration: {target.scanDuration}</span>
                    )}
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    {target.status === 'idle' && (
                      <button
                        onClick={() => startScan(target.id)}
                        disabled={scanningTargets.has(target.id)}
                        className="flex items-center space-x-1 px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-sm rounded-lg transition-colors disabled:opacity-50"
                      >
                        <Play className="w-3 h-3" />
                        <span>Scan</span>
                      </button>
                    )}
                    
                    {isScanning && (
                      <button className="flex items-center space-x-1 px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-sm rounded-lg transition-colors">
                        <Pause className="w-3 h-3" />
                        <span>Stop</span>
                      </button>
                    )}
                    
                    <button
                      onClick={() => setSelectedTarget(target)}
                      className="p-2 hover:bg-slate-100 rounded-lg"
                    >
                      <Settings className="w-4 h-4 text-slate-400" />
                    </button>
                  </div>
                </div>
              </motion.div>
            );
          })}
        </div>
      </div>

      {/* Vulnerability Details */}
      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold text-slate-900">Vulnerability Details</h3>
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2">
              <Filter className="w-4 h-4 text-slate-400" />
              <select
                value={filterSeverity}
                onChange={(e) => setFilterSeverity(e.target.value)}
                className="border border-slate-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="all">All Severities</option>
                <option value="critical">Critical</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
                <option value="info">Info</option>
              </select>
            </div>
            <button className="flex items-center space-x-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
              <Download className="w-4 h-4" />
              <span>Export Report</span>
            </button>
          </div>
        </div>

        <div className="space-y-4">
          {filteredVulns.map((vuln, index) => (
            <motion.div
              key={vuln.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`border rounded-xl p-6 ${getSeverityColor(vuln.severity)}`}
            >
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <h4 className="font-semibold text-slate-900">{vuln.title}</h4>
                    <span className={`px-2 py-1 text-xs rounded-full ${getSeverityColor(vuln.severity)}`}>
                      {vuln.severity.toUpperCase()}
                    </span>
                    <span className="text-sm text-slate-600">CVSS: {vuln.cvss}</span>
                  </div>
                  <p className="text-sm text-slate-600 mb-3">{vuln.description}</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-slate-900">Impact:</span>
                      <p className="text-slate-600 mt-1">{vuln.impact}</p>
                    </div>
                    <div>
                      <span className="font-medium text-slate-900">Recommendation:</span>
                      <p className="text-slate-600 mt-1">{vuln.recommendation}</p>
                    </div>
                  </div>
                </div>
                
                <div className="ml-4">
                  <AlertTriangle className={`w-6 h-6 ${
                    vuln.severity === 'critical' ? 'text-red-600' :
                    vuln.severity === 'high' ? 'text-orange-600' :
                    vuln.severity === 'medium' ? 'text-yellow-600' :
                    vuln.severity === 'low' ? 'text-green-600' : 'text-blue-600'
                  }`} />
                </div>
              </div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};